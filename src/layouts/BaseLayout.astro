---
import "../styles/global.css";
import CookieBanner from "../components/CookieBanner.astro";
// Firebase Analytics подключим через CDN, инициализация после согласия
// Скрипт аналитики подключим отдельным тегом внизу, чтобы он выполнялся только в браузере
const { title = "SectLauncher", description = "Кроссплатформенный лаунчер Minecraft" } = Astro.props;
// Разрешаем индексацию поисковиками
const allowIndexing = true;
const currentLocale = Astro.currentLocale ?? 'ru';
const ogLocale = currentLocale === 'ru' ? 'ru_RU' : 'en_US';
const ogLocaleAlt = currentLocale === 'ru' ? 'en_US' : 'ru_RU';
const baseHref = Astro.site?.href ?? 'https://sectlauncher.byteflipper.com/';
function toAbsoluteUrl(pathOrUrl: string | undefined): string | undefined {
  if (!pathOrUrl) return undefined;
  if (/^https?:\/\//i.test(pathOrUrl)) return pathOrUrl;
  const base = baseHref.endsWith('/') ? baseHref.slice(0, -1) : baseHref;
  const path = pathOrUrl.startsWith('/') ? pathOrUrl : `/${pathOrUrl}`;
  return `${base}${path}`;
}
const defaultOgImage = toAbsoluteUrl('/web-app-manifest-512x512.png');
---
<html lang={Astro.currentLocale ?? 'ru'} class="bg-neutral-950 text-neutral-100">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>{title}</title>
    <meta name="description" content={description} />
    <meta name="robots" content={allowIndexing ? 'index, follow' : 'noindex, nofollow'} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:site_name" content="SectLauncher" />
    <meta property="og:locale" content={ogLocale} />
    <meta property="og:image" content={defaultOgImage} />
    <meta property="og:locale:alternate" content={ogLocaleAlt} />
    <meta name="twitter:card" content="summary_large_image" />
    <link rel="icon" type="image/png" href="/favicon-96x96.png" sizes="96x96" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="shortcut icon" href="/favicon.ico" />
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <meta name="apple-mobile-web-app-title" content="SectLauncher" />
    <link rel="manifest" href="/site.webmanifest" />
    <style>
      .hero-bg{background:radial-gradient(1200px 600px at 20% 0%, rgba(46,204,113,.25), transparent 60%),radial-gradient(900px 500px at 80% 10%, rgba(241,196,15,.18), transparent 60%)}
    </style>
    <slot name="head" />
    <!-- Firebase Analytics (CDN) с отложенной инициализацией до согласия -->
    <script type="module">
      const firebaseConfig = {
        apiKey: 'AIzaSyDGE3JNXJp8c_4EmpXTw9rMES4V2LBLA60',
        authDomain: 'sectlauncher.firebaseapp.com',
        projectId: 'sectlauncher',
        storageBucket: 'sectlauncher.firebasestorage.app',
        messagingSenderId: '200769669419',
        appId: '1:200769669419:web:2a9b7ae31ffd00bb4d5d6e',
        measurementId: 'G-7Z4ZT6HVE5'
      };

      async function initAnalyticsCdn() {
        try {
          const { initializeApp, getApps, getApp } = await import('https://www.gstatic.com/firebasejs/12.1.0/firebase-app.js');
          const { getAnalytics, isSupported, setAnalyticsCollectionEnabled, logEvent } = await import('https://www.gstatic.com/firebasejs/12.1.0/firebase-analytics.js');
          const app = getApps().length ? getApp() : initializeApp(firebaseConfig);
          if (await isSupported()) {
            const analytics = getAnalytics(app);
            try { setAnalyticsCollectionEnabled(analytics, true); } catch {}
            try { logEvent(analytics, 'page_view', { debug_mode: true }); } catch {}
            // eslint-disable-next-line no-console
            console.log('[Analytics CDN] initialized');
          }
        } catch (e) {
          // eslint-disable-next-line no-console
          console.warn('[Analytics CDN] init failed', e);
        }
      }

      window.enableAnalytics = async () => {
        try { localStorage.setItem('cookie-consent', 'accepted'); } catch {}
        await initAnalyticsCdn();
        // eslint-disable-next-line no-console
        console.log('[Analytics CDN] enabled by user consent');
      };
      window.disableAnalytics = () => {
        try { localStorage.setItem('cookie-consent', 'declined'); } catch {}
        (async () => {
          try {
            const { initializeApp, getApps, getApp } = await import('https://www.gstatic.com/firebasejs/12.1.0/firebase-app.js');
            const { getAnalytics, setAnalyticsCollectionEnabled } = await import('https://www.gstatic.com/firebasejs/12.1.0/firebase-analytics.js');
            const app = getApps().length ? getApp() : initializeApp(firebaseConfig);
            const analytics = getAnalytics(app);
            try { setAnalyticsCollectionEnabled(analytics, false); } catch {}
          } catch {}
        })();
        // eslint-disable-next-line no-console
        console.log('[Analytics CDN] disabled by user');
      };

      // Автовключение, если ранее уже принято
      try {
        if (localStorage.getItem('cookie-consent') === 'accepted') {
          initAnalyticsCdn();
        }
      } catch {}
    </script>
    <script is:inline>
      try { localStorage.setItem('pref_locale', (Astro.currentLocale ?? 'ru')); } catch {}
    </script>
  </head>
  <body class="antialiased min-h-screen flex flex-col">
    <slot name="header" />
    <main class="flex-1"><slot /></main>
    <slot name="footer" />
    <CookieBanner locale={currentLocale as 'ru' | 'en'} />
  </body>
</html>


