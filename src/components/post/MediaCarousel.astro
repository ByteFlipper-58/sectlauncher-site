---
interface MediaItem { type: 'image' | 'video'; src: string; alt?: string }
interface Props { items?: MediaItem[] }
const { items = [] }: Props = Astro.props;
const hasItems = items.length > 0;
---

{hasItems && (
  <div class="mx-auto w-full lg:max-w-[70%] px-4 mt-6">
    <div class="relative overflow-hidden rounded-xl border border-neutral-800 bg-neutral-900">
      <div class="flex overflow-x-auto snap-x snap-mandatory scrollbar-hide">
        {items.map((m, idx) => (
          <div class="min-w-full snap-center grid place-items-center">
            {m.type === 'image' ? (
              <img src={m.src} alt={m.alt || ''} class="max-h[80vh] max-w-full w-auto h-auto object-contain" loading="lazy" />
            ) : (
              <video src={m.src} controls class="max-h-[80vh] max-w-full w-auto h-auto object-contain" />
            )}
          </div>
        ))}
      </div>
    </div>
  </div>
)}

<style>
.scrollbar-hide::-webkit-scrollbar { display: none; }
.scrollbar-hide { -ms-overflow-style: none; scrollbar-width: none; }
</style>


