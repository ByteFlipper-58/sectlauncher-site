---
interface Props {
  type?: 'ul' | 'ol';
  variant?: 'default' | 'minimal' | 'spaced' | 'compact';
  class?: string;
  start?: number; // для ol списков
}

const { 
  type = 'ul', 
  variant = 'default', 
  class: additionalClasses = '',
  start
}: Props = Astro.props;

const variantClasses = {
  default: {
    ul: 'space-y-1 pl-6 my-4',
    ol: 'space-y-1 pl-6 my-4',
    marker: 'text-blue-400'
  },
  minimal: {
    ul: 'space-y-0.5 pl-4 my-2',
    ol: 'space-y-0.5 pl-4 my-2', 
    marker: 'text-neutral-500'
  },
  spaced: {
    ul: 'space-y-3 pl-8 my-6',
    ol: 'space-y-3 pl-8 my-6',
    marker: 'text-blue-300'
  },
  compact: {
    ul: 'space-y-0 pl-4 my-1',
    ol: 'space-y-0 pl-4 my-1',
    marker: 'text-neutral-600'
  }
};

const config = variantClasses[variant];
const ListTag = type;
---

<ListTag 
  class={`
    custom-list 
    ${config[type]} 
    text-neutral-300 
    ${additionalClasses}
    ${type === 'ul' ? 'list-none' : 'list-decimal'}
  `}
  start={type === 'ol' ? start : undefined}
  data-variant={variant}
>
  <slot />
</ListTag>

<style define:vars={{ markerColor: variantClasses[variant].marker }}>
  .custom-list {
    position: relative;
  }

  /* Стили для неупорядоченных списков */
  .custom-list[data-variant] ul:where(:not(.no-custom-style)) {
    list-style: none;
    padding-left: 1.5rem;
  }

  .custom-list[data-variant] ul li:where(:not(.no-custom-style)) {
    position: relative;
    padding-left: 0.75rem;
  }

  .custom-list[data-variant] ul li:where(:not(.no-custom-style))::before {
    content: "•";
    position: absolute;
    left: -0.75rem;
    color: var(--markerColor);
    font-weight: bold;
    font-size: 1.1em;
    line-height: 1.2;
  }

  /* Стили для вложенных списков */
  .custom-list[data-variant] ul ul li:where(:not(.no-custom-style))::before {
    content: "◦";
    font-size: 1em;
  }

  .custom-list[data-variant] ul ul ul li:where(:not(.no-custom-style))::before {
    content: "▪";
    font-size: 0.9em;
  }

  /* Стили для упорядоченных списков */
  .custom-list[data-variant="default"] ol:where(:not(.no-custom-style)) {
    counter-reset: custom-counter;
  }

  .custom-list[data-variant="default"] ol li:where(:not(.no-custom-style)) {
    counter-increment: custom-counter;
    position: relative;
    padding-left: 0.75rem;
  }

  .custom-list[data-variant="default"] ol li:where(:not(.no-custom-style))::before {
    content: counter(custom-counter) ".";
    position: absolute;
    left: -1.5rem;
    color: var(--markerColor);
    font-weight: 600;
    min-width: 1.25rem;
    text-align: right;
  }

  /* Hover эффекты */
  .custom-list li:where(:not(.no-custom-style)):hover {
    color: white;
    transition: color 0.2s ease;
  }

  .custom-list li:where(:not(.no-custom-style)):hover::before {
    color: #3b82f6;
    transform: scale(1.1);
    transition: all 0.2s ease;
  }

  /* Стили для задач с чекбоксами */
  .custom-list li:where(:not(.no-custom-style)):has(input[type="checkbox"]) {
    display: flex;
    align-items: flex-start;
    gap: 0.5rem;
    padding-left: 0;
  }

  .custom-list li:where(:not(.no-custom-style)):has(input[type="checkbox"])::before {
    display: none;
  }

  .custom-list li:where(:not(.no-custom-style)) input[type="checkbox"] {
    margin-top: 0.125rem;
    width: 1rem;
    height: 1rem;
    border-radius: 0.25rem;
    border: 2px solid #6b7280;
    background-color: #1f2937;
    flex-shrink: 0;
    cursor: pointer;
    transition: all 0.2s ease;
    position: relative;
    outline: none;
  }

  .custom-list li:where(:not(.no-custom-style)) input[type="checkbox"]:checked {
    background-color: #3b82f6;
    border-color: #3b82f6;
    background-image: url("data:image/svg+xml,%3csvg viewBox='0 0 16 16' fill='white' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='m13.854 3.646-7.5 7.5a.5.5 0 0 1-.708 0l-3-3a.5.5 0 1 1 .708-.708L6 9.793l7.146-7.147a.5.5 0 0 1 .708.708z'/%3e%3c/svg%3e");
  }

  .custom-list li:where(:not(.no-custom-style)) input[type="checkbox"]:hover {
    border-color: #60a5fa;
    background-color: #374151;
    box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.2);
  }

  .custom-list li:where(:not(.no-custom-style)) input[type="checkbox"]:focus {
    border-color: #3b82f6;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.3);
  }

  /* Стили для текста завершенных задач */
  .custom-list li:where(:not(.no-custom-style)):has(input[type="checkbox"]:checked) {
    color: #a3a3a3;
  }

  .custom-list li:where(:not(.no-custom-style)):has(input[type="checkbox"]:checked) > * {
    text-decoration: line-through;
    opacity: 0.7;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .custom-list {
      padding-left: 1rem;
    }
    
    .custom-list li:where(:not(.no-custom-style)) {
      padding-left: 0.5rem;
    }
  }
</style>

<script>
  // Обработка интерактивности чекбоксов
  document.addEventListener('DOMContentLoaded', () => {
    const checkboxes = document.querySelectorAll('.custom-list input[type="checkbox"]');
    
    checkboxes.forEach(checkbox => {
      checkbox.addEventListener('change', (e) => {
        const target = e.target as HTMLInputElement;
        const listItem = target.closest('li');
        
        if (listItem) {
          // Добавляем анимацию при изменении состояния
          listItem.style.transition = 'all 0.3s ease';
          
          if (target.checked) {
            listItem.style.transform = 'translateX(2px)';
            setTimeout(() => {
              listItem.style.transform = '';
            }, 300);
          }
        }
      });
    });
  });
</script>
