---
import BaseLayout from "../../layouts/BaseLayout.astro";
import Header from "../../components/Header.astro";
import Footer from "../../components/Footer.astro";
import { getCollection } from 'astro:content';
import BlogCard from "../../components/BlogCard.astro";

const allPosts = (await getCollection('blog')).filter(p => {
  const isRu = (p.data.lang ?? 'ru') === 'ru';
  const isDraft = !!p.data.draft;
  const isPrivate = !!p.data.private;
  const publishAt = p.data.publishAt ? new Date(p.data.publishAt).getTime() : undefined;
  const now = Date.now();
  const isProd = import.meta.env.MODE === 'production';
  if (!isRu || isDraft) return false;
  if (!isProd) return true;
  if (isPrivate) return false;
  if (publishAt && publishAt > now) return !!p.data.premiere;
  return true;
});
const sortedPosts = allPosts.sort((a, b) => new Date(b.data.date).getTime() - new Date(a.data.date).getTime());

// Все посты без фильтрации по тегам
const posts = sortedPosts;
---

<BaseLayout title="Блог — SectLauncher" description="Новости и обновления SectLauncher.">
  <Fragment slot="header"><Header /></Fragment>
  <Fragment slot="head">
    <link rel="canonical" href="https://sectlauncher.byteflipper.com/ru/blog/" />
    <link rel="alternate" hreflang="en" href="https://sectlauncher.byteflipper.com/en/blog/" />
    <link rel="alternate" hreflang="x-default" href="https://sectlauncher.byteflipper.com/ru/blog/" />
    <meta property="og:url" content="https://sectlauncher.byteflipper.com/ru/blog/" />
  </Fragment>

  <section class="mx-auto max-w-6xl px-4 py-12">
    <!-- Header with search -->
    <div class="mb-8">
      <div class="flex flex-col md:flex-row md:items-center justify-between gap-4 mb-6">
        <h1 class="text-3xl md:text-4xl font-black bg-gradient-to-r from-white via-blue-100 to-white bg-clip-text text-transparent">
          Блог
        </h1>
        
        <!-- Search bar -->
        <div class="relative w-full md:w-[350px] h-[50px] flex items-center">
          <input 
            type="search" 
            id="searchInput"
            placeholder="Поиск постов..." 
            class="w-full h-full px-4 pl-12 pr-4 bg-neutral-900/60 border border-neutral-700 rounded-xl focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-500/20 transition-all duration-200 backdrop-blur-sm text-white placeholder-neutral-400"
          />
          <div class="absolute left-4 top-1/2 transform -translate-y-1/2 pointer-events-none">
            <svg class="w-5 h-5 text-neutral-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
            </svg>
          </div>
        </div>
      </div>

      <!-- Search Results -->
      <div id="searchResults" class="text-sm text-neutral-400 mb-4 hidden">
        Показано <span id="resultCount">0</span> из <span id="totalCount">{posts.length}</span> постов
      </div>
    </div>

    <!-- Posts grid -->
    <div id="postsGrid" class="grid md:grid-cols-2 xl:grid-cols-3 gap-6">
      {posts.map((post) => {
        const slugBase = post.slug.split('/').pop();
        return (
          <BlogCard
            href={`/ru/blog/${slugBase}`}
            title={post.data.title ?? 'Без названия'}
            description={post.data.description}
            date={post.data.date}
            tags={[]}
            heroImage={post.data.heroImage}
            locale="ru"
            premiere={!!post.data.premiere && (!!post.data.publishAt ? new Date(post.data.publishAt).getTime() > Date.now() : true)}
            premiereAt={post.data.publishAt}
            disabled={!!post.data.premiere && !!post.data.publishAt && new Date(post.data.publishAt).getTime() > Date.now()}
          />
        );
      })}
    </div>
  </section>

  <Fragment slot="footer"><Footer /></Fragment>
</BaseLayout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById('searchInput') as HTMLInputElement;
    const postsGrid = document.getElementById('postsGrid');
    const searchResults = document.getElementById('searchResults');
    const resultCount = document.getElementById('resultCount');
    const totalCount = document.getElementById('totalCount');

    if (!searchInput || !postsGrid || !searchResults || !resultCount || !totalCount) return;

    const allPosts = Array.from(postsGrid.children);
    let currentQuery = '';

    function normalizeText(text: string): string {
      return text.toLowerCase().trim();
    }

    function searchPosts(query: string) {
      currentQuery = normalizeText(query);
      let visibleCount = 0;

      allPosts.forEach((post) => {
        const title = post.querySelector('h2')?.textContent || '';
        const description = post.querySelector('p')?.textContent || '';
        const searchableText = normalizeText(`${title} ${description}`);
        const matches = !currentQuery || searchableText.includes(currentQuery);

        if (matches) {
          (post as HTMLElement).style.display = '';
          visibleCount++;
        } else {
          (post as HTMLElement).style.display = 'none';
        }
      });

      // Update search results
      if (resultCount) resultCount.textContent = visibleCount.toString();
      if (currentQuery) {
        searchResults?.classList.remove('hidden');
      } else {
        searchResults?.classList.add('hidden');
      }

      // Handle no results
      const noResultsMessage = document.getElementById('noResults');
      if (visibleCount === 0 && currentQuery) {
        if (!noResultsMessage && postsGrid) {
          const message = document.createElement('div');
          message.id = 'noResults';
          message.className = 'col-span-full text-center py-12';
          message.innerHTML = `
            <div class="text-neutral-500 mb-4">
              <svg class="w-16 h-16 mx-auto mb-4 opacity-50" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M9.172 16.172a4 4 0 015.656 0M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
              </svg>
              <p class="text-lg font-medium">Постов не найдено</p>
              <p class="text-sm">Попробуйте изменить поисковый запрос</p>
            </div>
          `;
          postsGrid.appendChild(message);
        }
      } else if (noResultsMessage) {
        noResultsMessage.remove();
      }

      // Отслеживаем поиск в аналитике
      if (currentQuery.length > 2) {
        try {
          import('/src/utils/analytics.ts').then(({ trackBlogSearch }) => {
            trackBlogSearch(currentQuery, visibleCount);
          });
        } catch {}
      }
    }

    // Debounced search
    let searchTimeout: ReturnType<typeof setTimeout>;
    searchInput.addEventListener('input', (e) => {
      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(() => {
        searchPosts((e.target as HTMLInputElement).value);
      }, 300);
    });

    // Clear search on Escape
    searchInput.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        searchInput.value = '';
        searchPosts('');
      }
    });

    // Initialize
    if (totalCount) totalCount.textContent = allPosts.length.toString();
  });
</script>