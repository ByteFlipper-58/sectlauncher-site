---
import BaseLayout from "../../layouts/BaseLayout.astro";
import Header from "../../components/Header.astro";
import Footer from "../../components/Footer.astro";
import { getCollection } from 'astro:content';
import BlogCard from "../../components/BlogCard.astro";

const allPosts = (await getCollection('blog')).filter(p => {
  const isEn = (p.data.lang ?? 'ru') === 'en';
  const isDraft = !!p.data.draft;
  const isPrivate = !!p.data.private;
  const publishAt = p.data.publishAt ? new Date(p.data.publishAt).getTime() : undefined;
  const now = Date.now();
  const isProd = import.meta.env.MODE === 'production';
  if (!isEn || isDraft) return false;
  if (!isProd) return true;
  if (isPrivate) return false;
  if (publishAt && publishAt > now) return !!p.data.premiere;
  return true;
});
const sortedPosts = allPosts.sort((a, b) => new Date(b.data.date).getTime() - new Date(a.data.date).getTime());

// Все посты без фильтрации по тегам
const posts = sortedPosts;
---

<BaseLayout title="Blog — SectLauncher" description="News and updates.">
  <Fragment slot="header"><Header /></Fragment>
  <Fragment slot="head">
    <link rel="canonical" href="https://sectlauncher.byteflipper.com/en/blog/" />
    <link rel="alternate" hreflang="ru" href="https://sectlauncher.byteflipper.com/ru/blog/" />
    <link rel="alternate" hreflang="x-default" href="https://sectlauncher.byteflipper.com/ru/blog/" />
    <meta property="og:url" content="https://sectlauncher.byteflipper.com/en/blog/" />
  </Fragment>

  <section class="mx-auto max-w-6xl px-4 py-12">
    <!-- Header with search -->
    <div class="mb-8">
      <div class="flex flex-col md:flex-row md:items-center justify-between gap-4 mb-6">
        <h1 class="text-3xl md:text-4xl font-black bg-gradient-to-r from-white via-blue-100 to-white bg-clip-text text-transparent">
          Blog
        </h1>
        
        <!-- Search bar -->
        <div class="relative w-full md:w-[350px] h-[50px] flex items-center">
          <input 
            type="search" 
            id="searchInput"
            placeholder="Search posts..." 
            class="w-full h-full px-4 pl-12 pr-4 bg-neutral-900/60 border border-neutral-700 rounded-xl focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-500/20 transition-all duration-200 backdrop-blur-sm text-white placeholder-neutral-400"
          />
          <div class="absolute left-4 top-1/2 transform -translate-y-1/2 pointer-events-none">
            <svg class="w-5 h-5 text-neutral-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
            </svg>
          </div>
        </div>
      </div>

      <!-- Search Results -->
      <div id="searchResults" class="text-sm text-neutral-400 mb-4 hidden">
        Showing <span id="resultCount">0</span> of <span id="totalCount">{posts.length}</span> posts
      </div>
    </div>

    <!-- Posts grid -->
    <div id="postsGrid" class="grid md:grid-cols-2 xl:grid-cols-3 gap-6">
      {posts.map((post) => {
        const slugBase = post.slug.split('/').pop();
        return (
          <BlogCard
            href={`/en/blog/${slugBase}`}
            title={post.data.title ?? 'Untitled'}
            description={post.data.description}
            date={post.data.date}
            tags={[]}
            heroImage={post.data.heroImage}
            locale="en"
            premiere={!!post.data.premiere && (!!post.data.publishAt ? new Date(post.data.publishAt).getTime() > Date.now() : true)}
            premiereAt={post.data.publishAt}
            disabled={!!post.data.premiere && !!post.data.publishAt && new Date(post.data.publishAt).getTime() > Date.now()}
          />
        );
      })}
    </div>
  </section>

  <Fragment slot="footer"><Footer /></Fragment>
</BaseLayout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById('searchInput') as HTMLInputElement;
    const postsGrid = document.getElementById('postsGrid');
    const searchResults = document.getElementById('searchResults');
    const resultCount = document.getElementById('resultCount');
    const totalCount = document.getElementById('totalCount');
    
    if (!searchInput || !postsGrid || !searchResults || !resultCount || !totalCount) return;
    
    const posts = Array.from(postsGrid.children);
    let isSearchActive = false;
    
    function updateResultsDisplay(filteredCount: number) {
      if (resultCount && totalCount) {
        resultCount.textContent = filteredCount.toString();
        totalCount.textContent = posts.length.toString();
      }
    }
    
    function performSearch() {
      const query = searchInput.value.toLowerCase().trim();
      
      if (query === '') {
        // Show all posts
        posts.forEach(post => {
          (post as HTMLElement).style.display = '';
        });
        searchResults.classList.add('hidden');
        isSearchActive = false;
        return;
      }
      
      isSearchActive = true;
      searchResults.classList.remove('hidden');
      
      let visibleCount = 0;
      
      posts.forEach(post => {
        const postElement = post as HTMLElement;
        const title = postElement.querySelector('h2')?.textContent?.toLowerCase() || '';
        const description = postElement.querySelector('p')?.textContent?.toLowerCase() || '';
        
        const matches = title.includes(query) || description.includes(query);
        
        if (matches) {
          postElement.style.display = '';
          visibleCount++;
        } else {
          postElement.style.display = 'none';
        }
      });
      
      updateResultsDisplay(visibleCount);
    }
    
    searchInput.addEventListener('input', performSearch);
    searchInput.addEventListener('keyup', performSearch);
  });
</script>